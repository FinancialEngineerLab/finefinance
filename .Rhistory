plot(ROCperf)
data("GermanCredit")
FraudData <- GermanCredit[,1:10]
head(FraudData)
#
len <- dim(FraudData)[1]
train <- sample(1:len, 0.8*len)
TrainData <- FraudData[train,]
TestData <- FraudData[-train,]
library(randomForest)
fraud_model <- randomForest(Class ~. , data=TrainData, ntree =50, proximity = TRUE)
print(fraud_model)
plot(fraud_model)
plot(fraud_model)
importance(fraud_model)
#
TestPred <- predict(fraud_model, newdata = TestData)
table(TestPred, TestData$Class)
library(PerformanceAnalytics)
data(edhec)
data <- edhec["1999", 3:5]
data
colnames(data) = c("DC", "EM", "EMN")
data
#
wts <- xtx(matrix(c(0.3, 0.3, 0.4), nrow =1, ncol = 3), as.Date("1998-12-31"))
#
wts <- wtx(matrix(c(0.3, 0.3, 0.4), nrow =1, ncol = 3), as.Date("1998-12-31"))
#
wts <- xts(matrix(c(0.3, 0.3, 0.4), nrow =1, ncol = 3), as.Date("1998-12-31"))
colnames(wts) <- colnames(data)
wts
#
Return.portfolio(data, weights = wts, rebalance_on = "months", verbose =TRUE)
library(randomForest)
library(mlbench)
library(caret)
data("Shuttle")
Analsis_Data <- head(Shuttle, 10000)
Analysis_Data <- head(Shuttle, 10000)
X <- Analysis_Data
X <- Analysis_Data[,1:9]
Y <- Analysis_Data[,10]
X <- Analysis_Data[,1:9] #~9열
Y <- Analysis_Data[,10] #10열
control <- trainControl(method = "repeatedcv", number =5, repeats = 3)
seed <- 4
metric <- "Accuracy"
set.seed(seed)
Count_var <- sqrt(ncol(X))
tunegrid <- expand.grid(.mtry = Count_var)
set.seed(seed)
Count_var <- sqrt(ncol(X))
tunegrid <- expand.grid(.mtry = Count_var)
rf_baseline <- train(Class ~ ., data = Analysis_Data, method = "rf", metric = metric, tuneGrid = tunegrid, trControl = control)
print(rf_baseline)
plot(rf_gridsearch_method)
#
control <- trainControl(method = "repeatedcv", number =5, repeats = 3, search= "grid")
set.seed(seed)
tunegrid <- expand.grid(.mtry = c(1:8))
rf_gridsearch_method <- train(Class ~ ., data = Analysis_Data, method = "rf", metric = metric, tuneGrid = tunegrid, trControl = control)
set.seed(seed)
tunegrid <- expand.grid(.mtry = c(1:8))
rf_gridsearch_method <- train(Class ~ ., data = Analysis_Data, method = "rf", metric = metric, tuneGrid = tunegrid, trControl = control)
#
control <- trainControl(method = "repeatedcv", number =5, repeats = 3, search= "grid")
set.seed(seed)
tunegrid <- expand.grid(.mtry = c(1:8))
rf_gridsearch_method <- train(Class ~ ., data = Analysis_Data, method = "rf", metric = metric, tuneGrid = tunegrid, trControl = control)
#유전자알고리즘
library(genalg)
library(ggplot2)
data("Shuttle")
Analysis_Data <- head(Shuttle, 10000)
X <- Analysis_Data[,1:9] #~9열
Y <- Analysis_Data[,10] #10열
control <- trainControl(method = "repeatedcv", number =5, repeats = 3)
seed <- 4
metric <- "Accuracy"
set.seed(seed)
Count_var <- sqrt(ncol(X))
tunegrid <- expand.grid(.mtry = Count_var)
rf_baseline <- train(Class ~ ., data = Analysis_Data, method = "rf", metric = metric, tuneGrid = tunegrid, trControl = control)
print(rf_baseline)
# better tool
control <- trainControl(method = "repeatedcv", number =5, repeats = 3, search= "grid")
set.seed(seed)
tunegrid <- expand.grid(.mtry = c(1:8))
rf_gridsearch_method <- train(Class ~ ., data = Analysis_Data, method = "rf", metric = metric, tuneGrid = tunegrid, trControl = control)
print(rf_gridsearch_method)
plot(rf_gridsearch_method)
plot(rf_gridsearch_method)
View(rf_gridsearch_method)
plot(rf_gridsearch_method
plot(rf_gridsearch_method)
plot(rf_gridsearch_method)
plot(data)
plot(rf_gridsearch_method)
print(rf_gridsearch_method)
plot(rf_gridsearch_method)
source('C:/Users/Shinhyunjin/Dropbox/금융공학/R Programming/Learning Quantitative Finance with R/Ch8 Optimization.R', encoding = 'UTF-8', echo=TRUE)
InputDataset <- data.frame(Stocks = c("Stock1", "Stock2", "Stock3","Stock4","Stock5", "Stock6"), retruns = c(10,11,15,20,12,13), weight = c(0.1, 0.2, 0.1, 0.2, 0.2, 0.3))
WTlimit <- 1
InputDataset
#
evaluationFunc <- function(x){
current_solution_returns <- x %*% InputDataset$retruns
current_solution_weight <- x %*% InputDataset$weight
if(current_solution_weight > WTlimit)
return(0) else return(-current_solution_returns)
}
#
GAmodel <- rbga.bin(size =6, popSize =100, iters =50, mutationChange = 0.01, elitism = T, evalFunc = evaluationFunc)
cat(summary(GAmodel))
#
GAmodel <- rbga.bin(size =6, popSize =100, iters =50, mutationChance = 0.01, elitism = T, evalFunc = evaluationFunc)
cat(summary(GAmodel))
install.packages("GA")
library(GA)
install.packages("GA")
install.packages("GA")
library(PerformanceAnalytics)
library(randomForest)
library(mlbench)
library(caret)
#유전자알고리즘
library(genalg)
library(ggplot2)
install.packages("GA")
library(GA)
InputDataset <- data.frame(Stocks = c("Stock1", "Stock2", "Stock3","Stock4","Stock5", "Stock6"), retruns = c(10,11,15,20,12,13), weight = c(0.1, 0.2, 0.1, 0.2, 0.2, 0.3))
WTlimit <- 1
InputDataset
#
evaluationFunc <- function(x){
current_solution_returns <- x %*% InputDataset$retruns
current_solution_weight <- x %*% InputDataset$weight
if(current_solution_weight > WTlimit)
return(0) else return(-current_solution_returns)
}
#
GAmodel <- rbga.bin(size =6, popSize =100, iters =50, mutationChance = 0.01, elitism = T, evalFunc = evaluationFunc)
cat(summary(GAmodel)) #GA result에서 제외되어야할 주식의 비중을 말해준다.
#
#
data(economics)
Data_Analysis <- data.frame(economics[,2:4])
head(Data_Analysis)
}
return(SSE)
OLS_GA <- funciton(Data_Analysis, a0, a1, a2){
attach(Data_Analysis, warn.conflicts = F)
Y_hat <- a0 + a1*pop + a2*psavert
SSE = t(pce-Y_hat) %*% (pce-Y_har)
detach(Data_Analysis)
return(SSE)
}
#
OLS_GA <- funciton(Data_Analysis, a0, a1, a2){
attach(Data_Analysis, warn.conflicts = F)
Y_hat <- a0 + a1*pop + a2*psavert
SSE = t(pce-Y_hat) %*% (pce-Y_har)
detach(Data_Analysis)
return(SSE)
}
#
OLS_GA <- funciton(Data_Analysis, a0, a1, a2){
attach(Data_Analysis, warn.conflicts = F)
Y_hat <- a0 + a1*pop + a2*psavert
SSE = t(pce-Y_hat) %*% (pce-Y_har)
detach(Data_Analysis)
return(SSE)
}
detach(Data_Analysis)
OLS_GA <- funciton(Data_Analysis, a0, a1, a2){
attach(Data_Analysis, warn.conflicts = F)
Y_hat <- a0 + a1*pop + a2*psavert
SSE = t(pce-Y_hat) %*% (pce-Y_hat)
detach(Data_Analysis)
return(SSE)
}
Data_Analysis
#
OLS_GA <- function(Data_Analysis, a0, a1, a2){
attach(Data_Analysis, warn.conflicts = F)
Y_hat <- a0 + a1*pop + a2*psavert
SSE = t(pce-Y_hat) %*% (pce-Y_hat)
detach(Data_Analysis)
return(SSE)
}
#
ga.OLS_GA <- ga(type = 'real-valued', min= c(-100,-100,-100), max = c(100,100,100), popSize=500, maxiter = 500, names=c('intercept', 'pop','psavert'), keepBest=T, fitness = function(a) - OLS_GA(Data_Analysis, a[1],a[2],a[3]))
summary(ga.OLS_GA)
install.packages("fOptions")
library(fOptions)
model <- GBSOption(TypeFlag = "c", S = 900, X = 950, Time = 1/4, r =0.02, sigma =0.22, b= 0.02)
# type : c or p, 기초자산, 행사가격, 만기, 무위험이자율, 변동성, 보유비용순
model
GBSOption(TypeFlag = "p", S = 900, X = 950, Time = 1/4, r = 0.02, sigma = 0.22, b = 0.02)
CRRBinomialTreeOption(TypeFlag = "ce", S =900, X =950, Time = 1/4, r = 0.02, b = 0.02, sigma = 0.22, n = 3)
CRRBinomialTreeOption(TypeFlag = "pe", S = 900, X = 950, Time = 1/4, r = 0.02, b = 0.02, sigma = 0.22, n = 3)
#
model <- BinomialTreeOption(TypeFlag = "ce", S = 900, X = 950, Time  = 1/4, r = 0.02, b = 0.02, sigma =0.22, n=3)
#
model <- BinomialTreeOption(TypeFlag = "ce", S = 900, X = 950, Time  = 1/4, r = 0.02, b = 0.02, sigma =0.22, n=3)
BinomialTreePlot(model, dy =1, xlab = "Time steps", ylab = "Option Value", xlim = c(0,4), ylim=c(-3,4))
title(main  = "Call Option Tree")
retrun(pr)}
retrun(pr)}
return(pr)}
return(pr)}
##함수로 정의
func <- function(n){
pr <- CRRBinomialTreeOption(TypeFlag = "ce", S = 900, X = 950, Time = 1/4, r = 0.02, b =0.02, sigma = 0.22, n = n)@price
return(pr)
}
#
price <- sapply(1:100, func) # 1~100반
#
price <- sapply(1:100, func) # 1~100반
#
price <- sapply(1:100, func) # 1~100반복
plot(price, type="l", xlab - "Number of steps", ylab = "Option Value")
plot(price, type="l", xlab = "Number of steps", ylab = "Option Value")
bs_price <- GBSOption(TypeFlag = "c", S = 900, X = 950, Time = 1/4, r = 0.02, sigma = 0.22, b = 0.02)@price
abline(h = bs_price, col = 'red')
legend("topright", legend = c('CRR-price', 'BS-price'), col = c('black', 'red'), pch = 19)
title(main = "Call Option Pricing models")
GBSGreeks(Selection = "delta", TypeFlag = "c", S = 900, X = 950, Time = 1/4, r = 0.02, b = 0.02, sigma = 0.22)
GBSGreeks(Selection = "gamma", TypeFlag = "c", S = 900, X = 950, Time = 1/4, r = 0.02, b = 0.02, sigma  =0.22)
#
portfolio <- sapply(c('c', 'p'), function(otype){sapply(500:1500, function(price){
GBSGreeks(Selection = 'delta',
TypeFlag = otype,
S=price, X = 950,
Time = 1/4, r = 0.02,
b = 0.02,
sigma =0.22)
})
})
head(protfolio)
head(portfolio)
## Straddle Delta
plot(500:1500, rowSums(portfolio), type = 'l', xlab = 'underlying Price', ylab = 'Straddle Delta')
install.packages("RQuantLib", type = 'binary')
library(RQuantLib)
iv <- EuropeanOptionImpliedVolatility("call", 11.10, 100, 100, 0.01, 0.03 ,05, 0.4)
iv
iv_a <- AmericanOptionImpliedVolatility("call", 11.10, 100, 100, 0.01, 0.03 ,05, 0.4)
iv_a
library(fOptions)
install.packages("RQuantLib", type = 'binary')
library(RQuantLib)
install.packages("termstrc")
library(termstrc)
install.packages("termstrc")
library(termstrc)
install.packages("termstrc")
library(termstrc)
install.packages("termstrc")
library(termstrc)
library(termstrc)
library(termstrc)
install.packages("termstrc")
library(termstrc)
library(termstrc)
data(govbonds)
install.packages("termstrc
")
install.packages("termstrc", lib = "/data/Rpackges/")
install.packages("termstrc", lib = "C:/Users/Shinhyunjin/Documents/R/win-library/")
library(termstrc)
install.packages("~/R/win-library/3.4/termstrc.zip", repos = NULL, type = "win.binary")
install.packages("termstrc", lib = "C:/Users/Shinhyunjin/Documents/R/win-library/3.4/")
install.packages("termstrc", lib = "C:/Users/Shinhyunjin/Documents/R/win-library/3.4/")
install.packages("termstrc-master", lib = "C:/Users/Shinhyunjin/Documents/R/win-library/3.4/")
install.packages("termstrc-master", lib = "C:/Users/Shinhyunjin/Documents/R/win-library/3.4/")
install.packages("termstrc", lib = "C:/Users/Shinhyunjin/Documents/R/win-library/3.4/")
library(termstrc, lib.loc= "C:/Users/Shinhyunjin/Documents/R/win-library/3.4/")
install.packages("termstrc.zip", lib = "C:/Users/Shinhyunjin/Documents/R/win-library/3.4/")
install.packages("termstrc", lib = "C:/Users/Shinhyunjin/Documents/R/win-library/3.4/")
install.packages("~/R/win-library/3.4/termstrc_1.3.7.tar.gz", repos = NULL, type = "source")
library(termstrc)
install.packages("~/R/win-library/3.4/termstrc.tar.gz", repos = NULL, type = "source")
install.packages("termstrc", lib = "C:/Users/Shinhyunjin/Documents/R/win-library/3.4/")
library(termstrc)
install.packages("termstrc", lib = "C:/Users/Shinhyunjin/Documents/R/win-library/3.4/")
install.packages("https://cran.r-project.org/src/contrib/Archive/termstrc/")
install.packages("termstrc", repos="http://R-Forge.R-project.org")
library(termstrc)
library(rgl)
library(termstrc)
library(termstrc.tar.gz)
install.packages("termstrc", repos="http://R-Forge.R-project.org")
install.packages("termstrc", repos="http://R-Forge.R-project.org")
install.packages("CreditMetrics")
library(CreditMetrics)
rc <- c("AAA", "AA", "A", "BBB","BB","B", "CCC", "D")
raw.data <- read.csv('C:/Users/Shinhyunjin/Dropbox/data/creidmatrix.csv', header=T, fileEncoding="UTF-8-BOM")
raw.data <- read.csv('C:/Users/Shinhyunjin/Dropbox/data/creditmatrix.csv', header=T, fileEncoding="UTF-8-BOM")
raw.data
cm.cs(raw.data, lgd)
raw.data
type(raw.data)
dtype(raw.data)
raw.data <- data.frame(raw.data)
lgd <- 0.2 # 부도시손실률
cm.cs(raw.data, lgd)
raw.data <- data.frame(raw.data)
raw.data
raw.data <- matrix(c(raw.data))
raw.data
lgd <- 0.2 # 부도시손실률
cm.cs(raw.data, lgd)
raw.data <- read.csv('C:/Users/Shinhyunjin/Dropbox/data/creditmatrix.csv', header=T, fileEncoding="UTF-8-BOM")
raw.data <- data.frame(raw.data)
### 9-2 신용파생상품  ###
rc <- c("AAA", "AA", "A", "BBB", "BB", "B", "CCC", "Default")
raw.data <- read.csv('C:/Users/Shinhyunjin/Dropbox/data/creditmatrix.csv', header=T, fileEncoding="UTF-8-BOM")
raw.data <- data.frame(raw.data)
raw.data <- matrix(c(raw.data), 8,8,dimnames = list(rc,rc), byrow=TRUE)
raw.data
raw.data <- read.csv('C:/Users/Shinhyunjin/Dropbox/data/creditmatrix.csv', header=T, fileEncoding="UTF-8-BOM")
#raw.data <- data.frame(raw.data)
raw.data <- matrix(c(raw.data), 8,8,dimnames = list(rc,rc), byrow=TRUE)
raw.data
raw.data <- read.csv('C:/Users/Shinhyunjin/Dropbox/data/creditmatrix.csv', header=T, fileEncoding="UTF-8-BOM")
View(raw.data)
raw.data
### 9-2 신용파생상품  ###
rc <- c("AAA", "AA", "A", "BBB", "BB", "B", "CCC", "Default")
#raw.data <- data.frame(raw.data)
raw.data <- matrix(c(raw.data), 8,8,dimnames = list(rc,rc), byrow=TRUE)
raw.data
### 9-2 신용파생상품  ###
rc <- c("AAA", "AA", "A", "BBB", "BB", "B", "CCC", "Default")
raw.data <- read.csv('C:/Users/Shinhyunjin/Dropbox/data/creditmatrix.csv', header=T, fileEncoding="UTF-8-BOM")
#raw.data <- data.frame(raw.data)
raw.data <- matrix(c(raw.data), dimnames = list(rc,rc), byrow=TRUE)
#raw.data <- data.frame(raw.data)
raw.data <- matrix(c(raw.data), dimnames = list(rc,rc))
### 9-2 신용파생상품  ###
rc <- c("AAA", "AA", "A", "BBB", "BB", "B", "CCC", "Default")
raw.data <- read.csv('C:/Users/Shinhyunjin/Dropbox/data/creditmatrix.csv', header=T, fileEncoding="UTF-8-BOM")
raw.data
raw.data[1,1]
raw.data <- raw.data[,1:8]
raw.data
raw.data <- read.csv('C:/Users/Shinhyunjin/Dropbox/data/creditmatrix.csv', header=T , fileEncoding="UTF-8-BOM")
raw.data <- raw.data[,2:9]
raw.data
raw.data <- matrix(c(raw.data), dimnames = list(rc,rc))
raw.data
raw.data <- read.csv('C:/Users/Shinhyunjin/Dropbox/data/creditmatrix.csv', header=T , fileEncoding="UTF-8-BOM")
raw.data <- raw.data[1:8,2:9]
raw.data
raw.data
raw.data <- matrix(c(raw.data), 8,8,dimnames = list(rc,rc))
raw.data
lgd <- 0.2 # 부도시손실률
cm.cs(raw.data, lgd)
raw.data <- read.csv('C:/Users/Shinhyunjin/Dropbox/data/creditmatrix.csv', header=T , fileEncoding="UTF-8-BOM")
raw.data <- raw.data[1:8,2:9]
raw.data
raw.data <- matrix(c(raw.data), dimnames = list(rc,rc))
raw.data <- read.csv('C:/Users/Shinhyunjin/Dropbox/data/creditmatrix.csv', header=T , fileEncoding="UTF-8-BOM")
raw.data
raw.data <- raw.data[1:8,2:9]
raw.data
raw.data <- read.csv('C:/Users/Shinhyunjin/Dropbox/data/creditmatrix.csv', header=T , fileEncoding="UTF-8-BOM")
raw.data <- raw.data[0:8,2:9]
raw.data
raw.data <- matrix(c(raw.data))
raw.data
raw.data <- read.csv('C:/Users/Shinhyunjin/Dropbox/data/creditmatrix.csv', header=T , fileEncoding="UTF-8-BOM")
raw.data <- raw.data[2:9,2:9]
raw.data
raw.data <- read.csv('C:/Users/Shinhyunjin/Dropbox/data/creditmatrix.csv', header=T , fileEncoding="UTF-8-BOM")
raw.data
View(raw.data)
raw.data <- read.csv('C:/Users/Shinhyunjin/Dropbox/data/creditmatrix.csv', fileEncoding="UTF-8-BOM")
raw.data <- raw.data[1:8,2:9]
raw.data <- read.csv('C:/Users/Shinhyunjin/Dropbox/data/creditmatrix.csv', fileEncoding="UTF-8-BOM")
raw.data
View(raw.data)
raw.data <- raw.data[],1:9]
raw.data <- raw.data[,1:9]
raw.data
View(raw.data)
raw.data <- raw.data[2:8, 2:8]
raw.data
raw.data <- read.csv('C:/Users/Shinhyunjin/Dropbox/data/creditmatrix.csv', fileEncoding="UTF-8-BOM")
raw.data <- raw.data[1:8, 1:8]
raw.data
raw.data <- read.csv('C:/Users/Shinhyunjin/Dropbox/data/creditmatrix.csv', fileEncoding="UTF-8-BOM")
raw.data <- raw.data[1:8, 2:9]
raw.data
raw.data <- matrix(raw.data, nrwo = 8, ncol = 8, byrow = TRUE, dimnames = list(rc,rc))
raw.data <- matrix(raw.data, nrow = 8, ncol = 8, byrow = TRUE, dimnames = list(rc,rc))
raw.data
lgd <- 0.2 # 부도시손실률
cm.cs(raw.data, lgd)
raw.data <- read.csv('C:/Users/Shinhyunjin/Dropbox/data/creditmatrix.csv', fileEncoding="UTF-8-BOM")
raw.data <- raw.data[1:8, 2:9]
#raw.data <- raw.data[1:8, 2:9]
raw.data
raw.data <- read.csv('C:/Users/Shinhyunjin/Dropbox/data/creditmatrix.csv',header= F fileEncoding="UTF-8-BOM")
#raw.data <- raw.data[1:8, 2:9]
raw.data
raw.data <- read.csv('C:/Users/Shinhyunjin/Dropbox/data/creditmatrix.csv',header= F ,fileEncoding="UTF-8-BOM")
#raw.data <- raw.data[1:8, 2:9]
raw.data
raw.data <- matrix(raw.data, nrow = 8, ncol = 8, byrow = TRUE, dimnames = list(rc,rc))
raw.data
raw.data <- matrix(c(raw.data), nrow = 8, ncol = 8, byrow = TRUE, dimnames = list(rc,rc))
raw.data
lgd <- 0.2 # 부도시손실률
cm.cs(raw.data, lgd)
#raw.data <- raw.data[1:8, 2:9]
raw.data
### 9-2 신용파생상품  ###
rc <- c("AAA", "AA", "A", "BBB", "BB", "B", "CCC", "Default")
raw.data <- read.csv('C:/Users/Shinhyunjin/Dropbox/data/creditmatrix.csv',header= F ,fileEncoding="UTF-8-BOM")
raw.data
c(raw.data)
raw.data <- matrix(raw.data, nrow = 8, ncol = 8, byrow = TRUE, dimnames = list(rc,rc))
raw.data <- read.csv('C:/Users/Shinhyunjin/Dropbox/data/creditmatrix.csv',header= F ,fileEncoding="UTF-8-BOM")
#raw.data <- raw.data[1:8, 2:9]
raw.data
raw.data <- matrix(raw.data, nrow = 8, ncol = 8, byrow = TRUE, dimnames = list(rc,rc))
raw.data
M <- matrix(c(90.81, 8.33, 0.68, 0.06, 0.08, 0.02, 0.01, 0.01,
0.70, 90.65, 7.79, 0.64, 0.06, 0.13, 0.02, 0.01,
0.09, 2.27, 91.05, 5.52, 0.74, 0.26, 0.01, 0.06,
0.02, 0.33, 5.95, 85.93, 5.30, 1.17, 1.12, 0.18,
0.03, 0.14, 0.67, 7.73, 80.53, 8.84, 1.00, 1.06,
0.01, 0.11, 0.24, 0.43, 6.48, 83.46, 4.07, 5.20,
0.21, 0, 0.22, 1.30, 2.38, 11.24, 64.86, 19.79,
0, 0, 0, 0, 0, 0, 0, 100
)/100, 8, 8, dimnames = list(rc, rc), byrow = TRUE)
lgd <- 0.2 # 부도시손실률
cm.cs(raw.data, lgd)
cm.cs(M, lgd)
#
ead <- c(140000,100000,100000) # 부도시 exposure
N <- 3 # firms
n <- 50000 #난수
r <- 0.03 #rf
rating <- c("BBB", "AA", "B")
firmnames <- c("Blizzard", "Activision", "Nexon")
alpha <- 0.99
rho <- matrix(c(1,0.4,0.6,0.4,1,0.5,0.6,0.5,1),3,3,dimnames=list(firmnames, firmnames),byrow=TRUE)
cm.CVaR(M, lgd, ead, N, n,r,rho,alpha,rating)
pnl <- cm.gain(M, lgd, ead, N, n, r, rho,rating)
pnl
install.packages("credule")
library(credule) #신용파생상
yct = c(1,2,3,4,5,7)
ycr = c(0.0050, 0.0070, 0.0080, 0.0100, 0.0120, 0.0150)
cct = c(1,3,5,7)
ccsp = c(0.99, 0.98, 0.95, 0.92)
tenors = c(1,3,5,7)
yct = c(1,2,3,4,5,7) #테너 (테너 : 채무발생일 ~ 만기일간 기한, 결제기간이라고함)
ycr = c(0.0050, 0.0070, 0.0080, 0.0100, 0.0120, 0.0150) #수익률곡선할인률
cct = c(1,3,5,7) #테너
ccsp = c(0.99, 0.98, 0.95, 0.92) #생존확률
tenors = c(1,3,5,7) #만기
r = 0.4 #회수율
priceCDS(yct, ycr, cct, ccsp, tenor, r)
priceCDS(yct, ycr, cct, ccsp, tenors, r)
#
cdsSpreads = c(0.0050, 0.0070, 0.0090, 0.0110)
bootstrapCDS(yct,ycr,cct,ccsp,r)
install.packages("GUIDE")
library(GUIDE)
## 금리파생상품 ##
irswapvalue()
## 금리파생상품 ##
irswapvalue()
install.packages("fExoticOptions")
library(fExoticOptions)
price <- GeometricAverageRateOption("c", 110, 120, 0.5, 0.03, 0.05 ,0.1)
price
#2번 방법
TurnbullWakemanAsianApproxOption(TypeFlag = "p", S = 100, SA = 102, X = 120, Time = 0.5,
time = 0.25, tau = 0, r = 0.03, b = 0.05, sigma = 0.1)@price
#3번 방법
LevyAsianApproxOption(TypeFlag = "p", S = 100, SA = 102, X = 120, Time = 0.5,
time = 0.25, r = 0.03, b = 0.05, sigma = 0.1)
#3번 방법
LevyAsianApproxOption(TypeFlag = "p", S = 100, SA = 102, X = 120, Time = 0.5,
time = 0.25, r = 0.03, b = 0.05, sigma = 0.1)@price
# Down and Out
StandardBarrierOption(TypeFlag = "cdo", S  =100, X=90, H = 95, K = 3, Time=0.5, r = 0.08, b = 0.04, sigma = 0.25)@price
#2번 Up and out down and out call (Double Barrier)
DoubleBarrierOption(TypeFlag = "co", S = 100,X=100, L = 50, U = 150, TIme =0.25,
r = 0.1 ,b=0.1, sigma = 0.15, delta1 = -0.1, delta2 = 0.1)@price
#2번 Up and out down and out call (Double Barrier)
DoubleBarrierOption(TypeFlag = "co", S = 100,X=100, L = 50, U = 150, Time =0.25,
r = 0.1 ,b=0.1, sigma = 0.15, delta1 = -0.1, delta2 = 0.1)@price
#3번 룩백 Barrier Up and out
LookBarrierOption(TypeFlag = "cuo", S = 100, X = 100, H = 130, Time1 = 0.25, Time2 = 1, r=0.1,b=0.1, sigma=0.15)@price
#3번 룩백 Barrier Up and out
LookBarrierOption(TypeFlag = "cuo", S = 100, X = 100, H = 130, time1 = 0.25, Time2 = 1, r=0.1,b=0.1, sigma=0.15)@price
#4번 Gap Digital
GapOption(TypeFlag = "c", S = 50, X1= 50, X2= 57, Time = 0.5, r = 0.09, b = 0.09, sigma = 0.20)
## 5번 Cash or Nothing : 만기시점에 기초자산가격이 행사가격에 도달할 경우 미리 정한가 지불 ##
CashOrNothingOption(TypeFlag = "p", S = 100, X = 80, K = 10, Time = 9/12, r = 0.06, b = 0, sigma = 0.35)
TwoAssetCashOrNothingOption(TypeFlag = "c", S1 = 100, S2 = 100, X1 = 110, X2 = 90,
K = 10, Time = 0.5, r=0.1, b1 = 0.05, b2= 0.06, sigma1 = 0.2, sigma2=0.25,
rho = 0.5)@price
